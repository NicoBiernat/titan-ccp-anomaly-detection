apply plugin: 'application'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
//apply plugin: 'com.github.spotbugs'
apply plugin: 'eclipse'

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
//  dependencies {
//      classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.3"
//  }
}

sourceCompatibility = "1.11"
targetCompatibility = "1.11"

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects { 
	repositories {
	    jcenter()
	    maven {
	    	url "https://oss.sonatype.org/content/repositories/snapshots/"
	    }
	}
}

dependencies {
    compile('org.industrial-devops:titan-ccp-common:0.0.1-SNAPSHOT') { changing = true }
    compile 'net.kieker-monitoring:kieker:1.14-SNAPSHOT'
    compile 'org.apache.kafka:kafka-streams:2.3.0'
    compile 'com.sparkjava:spark-core:2.7.2'
	compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.google.guava:guava:20.0'
    compile 'net.jodah:failsafe:1.1.0'
    compile 'org.apache.commons:commons-configuration2:2.2'
    compile 'commons-beanutils:commons-beanutils:1.9.2' // for commons-configuration2
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'org.apache.commons:commons-math3:3.5'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    testCompile 'com.github.stefanbirkner:system-rules:1.17.0'
}

mainClassName = "titan.ccp.anomalydetection.AnomalyDetectionService"

pmd {
  ruleSets = [] // Gradle requires to clean the rule sets first
  ruleSetFiles = files("config/pmd.xml")
  ignoreFailures = true
  toolVersion = "6.7.0"
}

checkstyle {
  configDir = file("config")
  configFile = file("config/checkstyle.xml")
  maxWarnings = 0
  ignoreFailures = true
  toolVersion = "8.12"
}

//spotbugs {
//  excludeFilter = file("config/spotbugs-exclude-filter.xml")
//  reportLevel = "low"
//  effort = "max"
//  ignoreFailures = true
//  toolVersion = '3.1.7'
//}

// Per default XML reports for SpotBugs are generated
// Include this to generate HTML reports
//tasks.withType(com.github.spotbugs.SpotBugsTask) {
//  reports {
////     Either HTML or XML reports can be activated
//    html.enabled true
//    xml.enabled false
//  }
//}

task checkstyle {
  group 'Quality Assurance'
  description 'Run Checkstyle'
  
  dependsOn 'checkstyleMain'
  dependsOn 'checkstyleTest'
}

task pmd {
  group 'Quality Assurance'
  description 'Run PMD'

  dependsOn 'pmdMain'
  dependsOn 'pmdTest'
}

//task spotbugs {
//    group 'Quality Assurance'
//    description 'Run SpotBugs'
//
//    dependsOn 'spotbugsMain'
//    dependsOn 'spotbugsTest'
//}

eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc=true
    }
}
